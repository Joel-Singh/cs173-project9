//==============================================================
// your name here
// date here
// List.cpp
// This file contains the class method definitions for
// the List class.
//==============================================================

#include <iostream>
#include <stdlib.h>
using namespace std;

//==============================================================
// default constructor
//==============================================================
template <typename T>
List<T>::List() {
    capacity = DEFAULT_ARRAY_SIZE;
    size = 0;
    arr = new int[10];
}


//==============================================================
// copy constructor
//==============================================================

//==============================================================
// destructor
//==============================================================
template <typename T>
List<T>::~List()
{
    delete []arr;
}

//==============================================================
// operator=
//==============================================================

//==============================================================
// append
//==============================================================

//==============================================================
// insert  ( item, position )
//==============================================================

//==============================================================
// length
//==============================================================

//==============================================================
// operator[]
// Valid indices are 0 to size-1.   Invalid indices generate
// a run-time error and end the program.
//==============================================================

//==============================================================
// remove
// Valid indices are 0 to size-1.   Invalid indices generate
// a run-time error and end the program.
//==============================================================

//==============================================================
// isEmpty
//==============================================================

//==============================================================
// operator+  (concatenate two lists)
//==============================================================

//==============================================================
// clear
//==============================================================

//==============================================================
// reallocate
// double the size of the array holding the list
// *** If you choose to implement this.  It is not part of the
// public interface so you may opt to do something different. ***
//==============================================================

//==============================================================
